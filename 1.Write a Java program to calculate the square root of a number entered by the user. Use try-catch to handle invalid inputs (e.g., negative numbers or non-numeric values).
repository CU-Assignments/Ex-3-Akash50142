import java.util.HashSet;
import java.util.Set;

class Student {
    private String name;
    private Set<String> completedCourses;

    public Student(String name) {
        this.name = name;
        this.completedCourses = new HashSet<>();
    }

    public String getName() {
        return name;
    }

    public Set<String> getCompletedCourses() {
        return completedCourses;
    }

    public void completeCourse(String course) {
        completedCourses.add(course);
    }
}

class Course {
    private String courseName;
    private int maxEnrollment;
    private int currentEnrollment;
    private Set<String> prerequisites;

    public Course(String courseName, int maxEnrollment, Set<String> prerequisites) {
        this.courseName = courseName;
        this.maxEnrollment = maxEnrollment;
        this.currentEnrollment = 0;
        this.prerequisites = prerequisites;
    }

    public String getCourseName() {
        return courseName;
    }

    public Set<String> getPrerequisites() {
        return prerequisites;
    }

    public void enrollStudent(Student student) throws CourseFullException, PrerequisiteNotMetException {
        if (currentEnrollment >= maxEnrollment) {
            throw new CourseFullException("Course " + courseName + " is full.");
        }
        for (String prerequisite : prerequisites) {
            if (!student.getCompletedCourses().contains(prerequisite)) {
                throw new PrerequisiteNotMetException("Student " + student.getName() + " has not completed the prerequisite " + prerequisite + " for " + courseName);
            }
        }
        currentEnrollment++;
        System.out.println("Student " + student.getName() + " successfully enrolled in " + courseName);
    }
}

class CourseFullException extends Exception {
    public CourseFullException(String message) {
        super(message);
    }
}

class PrerequisiteNotMetException extends Exception {
    public PrerequisiteNotMetException(String message) {
        super(message);
    }
}

public class Main {
    public static void main(String[] args) {
        Set<String> prerequisitesForCS102 = new HashSet<>();
        prerequisitesForCS102.add("CS101");
        Course cs102 = new Course("CS102", 2, prerequisitesForCS102);

        Set<String> prerequisitesForCS101 = new HashSet<>();
        Course cs101 = new Course("CS101", 3, prerequisitesForCS101);

        Student student1 = new Student("Alice");
        Student student2 = new Student("Bob");
        Student student3 = new Student("Charlie");

        student1.completeCourse("CS101");

        try {
            cs101.enrollStudent(student1);
            cs102.enrollStudent(student1);

            cs101.enrollStudent(student2);
            cs102.enrollStudent(student2);

            cs102.enrollStudent(student3);
        } catch (CourseFullException | PrerequisiteNotMetException e) {
            System.out.println(e.getMessage());
        }

        try {
            cs102.enrollStudent(student3);
        } catch (CourseFullException | PrerequisiteNotMetException e) {
            System.out.println(e.getMessage());
        }
    }
}                           
